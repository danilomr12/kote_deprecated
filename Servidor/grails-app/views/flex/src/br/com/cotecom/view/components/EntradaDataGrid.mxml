<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         verticalGap="0">

    <mx:Script>
		<![CDATA[
        import br.com.cotecom.control.events.aplicacao.ShowViewCotacaoEnviadaEvent;
        import br.com.cotecom.control.events.aplicacao.ShowViewCotacaoProcessandoEnvioDeRespostasEvent;
        import br.com.cotecom.control.events.aplicacao.ShowViewCotacaoRascunhoEvent;
        import br.com.cotecom.control.events.aplicacao.ShowViewPedidoEvent;
        import br.com.cotecom.control.events.aplicacao.ShowViewRespostaEvent;
        import br.com.cotecom.model.Session;
        import br.com.cotecom.model.services.comprador.GerenciadorAplicacao;
        import br.com.cotecom.model.services.comprador.GerenciadorCotacao;
        import br.com.cotecom.model.utils.EstadoCotacao;
        import br.com.cotecom.util.date.DateUtils;

        import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
        import mx.events.ListEvent;
        import mx.utils.ObjectUtil;

        [Bindable]
        public var headerLabels:Array = ["Nome", "Descrição", "Estado", "Data"];

        [Bindable]
        public var dataProvider:Object;

        [Bindable]
        [Embed("/assets/botones/atras2.png")]
        public var cotacaoIcon:Class;

        [Bindable]
        [Embed("/assets/img/Blue_04.png")]
        public var respostaIcon:Class;

        [Bindable]
        [Embed("/assets/img/chart_02.png")]
        public var pedidoIcon:Class;

        [Bindable]
        [Embed("/assets/img/chart_02.png")]
        public var faltaIcon:Class;

        public var manager:GerenciadorCotacao = GerenciadorCotacao.getInstance();
        public var model:Session = Session.getInstance();

        public function init():void {

        }

        public function tituloLabel(item:Object, column:AdvancedDataGridColumn):String {
            var str:String = "";
            var xml:XML = XML(item);
            switch (xml.localName()) {
                case "cotacao":
                    if (xml.titulo == "" || xml.titulo == null) {
                        str = "[sem título]";
                    } else {
                        str = xml.titulo;
                    }
                    break;
                case "resposta":
                    str = xml.representante;
                    break;
                case "pedido":
                    str = xml.titulo;
                    break;
                case "falta":
                    str = xml.titulo;
                    break;
            }
            return str;
        }

        public function descricaoLabel(item:Object, column:AdvancedDataGridColumn):String {
            var str:String = "";
            var xml:XML = XML(item);
            switch (xml.localName()) {
                case "cotacao":
                    break;
                case "resposta":
                    str = xml.empresa;
                    if (xml.empresa == "" || xml.empresa == "null" || xml.empresa == null)
                        str = "[Sem empresa cadastrada]";
                    break;
                case "pedido":
                    str = "total: " + xml.total;
                    break;
                case "falta":
                    str = "nº de itens: " + xml.qtdeItensFaltantes;
                    break;
            }
            return str;
        }

        public function dataCriacaoLabel(item:Object, column:AdvancedDataGridColumn):String {
            var str:String = "";
            var xml:XML = XML(item);
            switch (xml.localName()) {
                case "cotacao":
                    str = xml.dataCriacao;
                    break;
                case "resposta":
                    str = xml.dataCricao;
                    break;
                case "pedido":
                    break;
                case "falta":
                    break;
            }
            return str;
        }

        public function dataSalvaLabel(item:Object, column:AdvancedDataGridColumn):String {
            var str:String = "";
            var xml:XML = XML(item);
            switch (xml.localName()) {
                case "cotacao":
                    str = xml.dataSalva;
                    break;
                case "resposta":
                    str = xml.dataSalva;
                    break;
                case "pedido":
                    break;
                case "falta":
                    break;
            }
            return str;
        }

        public function statusLabel(item:Object, column:AdvancedDataGridColumn):String {
            var str:String = "";
            var xml:XML = XML(item);
            switch (xml.localName()) {
                case "cotacao":
                    var count:String = "";
                    if (xml.estadoCount != "")
                        count += "(" + xml.estadoCount + ")";
                    str = xml.status + count;
                    break;
                case "resposta":
                    str = xml.status;
                    break;
                case "pedido":
                    break;
                case "falta":
                    break;
            }
            return str;
        }

        public function anIcon(item:Object, column:AdvancedDataGridColumn = null):Class {
            return null;
        }

        private function iconFunc(item:Object):Class {
            var iconClass:Class;
            var xml:XML = XML(item);
            switch (xml.localName()) {
                case "cotacao":
                    iconClass = cotacaoIcon;
                    break;
                case "resposta":
                    iconClass = respostaIcon;
                    break;
                case "pedido":
                    iconClass = pedidoIcon;
                    break;
                case "falta":
                    iconClass = faltaIcon;
                    break;
            }
            return iconClass;
        }

        public function openSelectedItem(event:ListEvent):void {
            var item:* = event.itemRenderer.data;
            var gerenciadorAplicacao:GerenciadorAplicacao = GerenciadorAplicacao.getInstance();
            var xml:XML = XML(item);

            switch (xml.localName()) {
                case "cotacao":
                    var statusCotacao:String = xml.status;
                    if (statusCotacao == EstadoCotacao.descricao[EstadoCotacao.RASCUNHO]) {
                        new ShowViewCotacaoRascunhoEvent(xml.id).dispatch();
                    } else if (statusCotacao == EstadoCotacao.descricao[EstadoCotacao.PROCESSANDO_ENVIO_DE_RESPOSTAS]) {
                        new ShowViewCotacaoProcessandoEnvioDeRespostasEvent().dispatch();
                    } else {
                        new ShowViewCotacaoEnviadaEvent(xml.id, EstadoCotacao.descricao.indexOf(statusCotacao)).dispatch();
                    }
                    break;
                case "resposta":
                    new ShowViewRespostaEvent(xml.id).dispatch();
                    break;
                case "pedido":
                    new ShowViewPedidoEvent(xml.id).dispatch();
                    break;
            }
        }

        private function sortDataCriacao(obj1:Object, obj2:Object):int {
            return compareDatas(obj1.dataCriacao, obj2.dataCriacao);
        }

        private function sortDataSalva(obj1:Object, obj2:Object):int {
            return compareDatas(obj1.dataSalva, obj2.dataSalva);
        }

        private function sortStatus(obj1:Object, obj2:Object):int {
            return compareNumeros(obj1.status as int, obj2.status as int)
        }

        private function compareNumeros(d1:Number, d2:Number):int {
            if (d1 < d2) {
                return -1;
            } else if (d1 == d2) {
                return 0;
            }
            return 1;
        }

        private function sortDescricao(obj1:Object, obj2:Object):int {
            return ObjectUtil.compare(obj1.descricao as String, obj2.descricao as String);
        }

        private function sortTitulo(obj1:Object, obj2:Object):int {
            var titulo1:String = obj1.titulo;
            var titulo2:String = obj2.titulo;
            return ObjectUtil.compare(titulo1, titulo2);
        }

        private function compareDatas(obj1:String, obj2:String):int {
            return compareNumeros(DateUtils.parseDate(obj1).getTime(), DateUtils.parseDate(obj2).getTime());
        }
        ]]>
	</mx:Script>


    <mx:AdvancedDataGrid id="grid" width="100%" height="100%"
                         verticalGridLines="false"
                         sortExpertMode="false"
                         horizontalGridLines="true"
                         showHeaders="true" textAlign="center"
                         iconField="icon"
                         sortableColumns="true"
                         doubleClickEnabled="true"
                         itemDoubleClick="openSelectedItem(event)">
        <mx:dataProvider>
            <mx:HierarchicalData source="{this.dataProvider}"
                                 childrenField="childrem"/>
        </mx:dataProvider>

        <mx:columns>
            <mx:AdvancedDataGridColumn headerText="Título" labelFunction="tituloLabel" dataField="titulo"
                                       width="300" sortable="true" sortDescending="true"/>
            <mx:AdvancedDataGridColumn headerText="Forncedor" labelFunction="descricaoLabel" dataField="descricao"
                                       sortable="true"/>
            <mx:AdvancedDataGridColumn headerText="Estado" labelFunction="statusLabel" dataField="status"
                                       width="184" sortable="true"/>
            <mx:AdvancedDataGridColumn headerText="Salva em" labelFunction="dataSalvaLabel" dataField="dataSalva"
                                       width="150" sortable="true" sortCompareFunction="sortDataSalva"/>
            <mx:AdvancedDataGridColumn headerText="Criada em" labelFunction="dataCriacaoLabel" dataField="dataCriacao"
                                       width="150" sortable="true" sortCompareFunction="sortDataCriacao"/>
        </mx:columns>
    </mx:AdvancedDataGrid>
</mx:VBox>