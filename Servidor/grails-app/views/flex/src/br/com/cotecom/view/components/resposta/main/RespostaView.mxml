<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml"
          xmlns:resposta="br.com.cotecom.view.components.resposta.*"
          xmlns:components="com.hillelcoren.components.*"
          xmlns:application="br.com.cotecom.view.components.application.*"
          headerHeight="0" left="320" right="10" top="0" bottom="10" paddingTop="10"
          borderStyle="solid" dropShadowEnabled="true" shadowDirection="left"
          creationComplete="creationCompleteHandler(event)"
          hide="hideHandler(event)"
          currentState="{getEstadoAtual(this._telaResposta)}">

    <mx:Script>
		<![CDATA[
        import br.com.cotecom.control.events.DownloadFileEvent;
        import br.com.cotecom.control.events.ImporteEvent;
        import br.com.cotecom.control.events.LoadEvent;
        import br.com.cotecom.model.Session;
        import br.com.cotecom.model.domain.pedido.Pedido;
        import br.com.cotecom.model.domain.resposta.ItemResposta;
        import br.com.cotecom.model.domain.resposta.TelaResposta;
        import br.com.cotecom.model.services.resposta.GerenciadorResposta;
        import br.com.cotecom.model.utils.EstadoCotacao;
        import br.com.cotecom.model.utils.EstadoResposta;
        import br.com.cotecom.view.components.resposta.DadosCliente;
        import br.com.cotecom.view.components.resposta.DadosCotacao;
        import br.com.cotecom.view.components.resposta.TermoAcordo;
        import br.com.cotecom.view.util.Icons;

        import com.notifications.Notification;

        import mx.containers.ViewStack;
        import mx.controls.Alert;
        import mx.core.Application;
        import mx.events.CloseEvent;
        import mx.events.DataGridEvent;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        private var gerenciadorResposta:GerenciadorResposta = GerenciadorResposta.getInstance();
        [Bindable]
        private var _telaResposta:TelaResposta = new TelaResposta();
        [Bindable]
        public var session:Session = Session.getInstance();
        private var fileRef:FileReference;
        private var fileTypes:Array = new Array();
        private var timerSalvamentoItens:Timer = new Timer(60000);

        [Bindable(event="respostasChanged")]
        public function get telaResposta():TelaResposta {
            return this._telaResposta;
        }

        public function set telaResposta(tela:TelaResposta):void {
            this._telaResposta = tela;
            var event:Event = new Event("respostasChanged");
            dispatchEvent(event);
        }

        private function getEstadoAtual(telaresposta:TelaResposta):String {
            if (!telaresposta.resposta)
                return "nova";
            var status:int = telaresposta.resposta.status;
            if (status == EstadoResposta.NOVA_COTACAO) {
                return "nova";
            } else if (isPerdidaOuRecusadaOuCanceladaOuAguardAnaliseOuEmAnalise(status)) {
                return "canceladaOuRecusadaOuPerdidaOuAguardAnaliseOuEmAnalise";
            } else if (status == EstadoResposta.RESPONDENDO) {
                return "respondendo";
            } else if (status == EstadoResposta.RESPONDA_PEDIDO_PENDENTE
                    || status == EstadoResposta.PEDIDO_FATURADO
                    || status == EstadoResposta.AGUARDANDO_RETORNO_DE_PEDIDOS ) {
                return "pedidoEnviadoOuPedidoFaturado";
            }
            return "nova";
        }

        private static function isPerdidaOuRecusadaOuCanceladaOuAguardAnaliseOuEmAnalise(status:int):Boolean {
            return status == EstadoResposta.CANCELADA || status == EstadoResposta.RECUSADA
                    || status == EstadoResposta.PERDIDA || status == EstadoResposta.AGUARDANDO_OUTRAS_RESPOSTAS
                    || status == EstadoResposta.AGUARDANDO_ANALISE || status == EstadoResposta.EM_ANALISE
                    || status == EstadoResposta.ANALISANDO_FALTAS;
        }

        public function setFilter():void {
            if (gerenciadorResposta.telaResposta == null) {
                return;
            }
            if (gerenciadorResposta.telaResposta.itensResposta != null) {
                gerenciadorResposta.telaResposta.itensResposta.filterFunction = filterFuntion;
                gerenciadorResposta.telaResposta.itensResposta.refresh();
            }
        }

        private function filtreItensResposta(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.TAB || event.keyCode == Keyboard.DOWN)
                focusManager.setFocus(dataGrid);
        }

        public function filterFuntion(item:Object):Boolean {
            var item2:ItemResposta = item as ItemResposta;

            if (item2.categoria && item2.categoria.match(new RegExp(filtro.text, 'i')))
                return true;
            else if (item2.embalagem && item2.embalagem.match(new RegExp(filtro.text, 'i')))
                return true;
            else if (item2.descricao && item2.descricao.match(new RegExp(filtro.text, 'i')))
                return true;
            else if (item2.quantidade.toString() && item2.quantidade.toString().match(new RegExp(filtro.text, 'i')))
                return true;
            return false
        }

        private function dataGrid_itemEditEndHandler(event:DataGridEvent):void {
            if (!gerenciadorResposta.editavel)
                gerenciadorResposta.alerteUsuario()
        }

        private function salveResposta(event:MouseEvent):void {
            if (gerenciadorResposta.telaResposta == null) {
                session.messageHandler.showTextMessage("Erro", "Sua Cotação não foi carregada.", Icons.ERROR);
                return;
            }
            if (gerenciadorResposta.editavel) {
                if (gerenciadorResposta.telaResposta.getUnsavedItens().length < 1) {
                    Notification.show("A resposta não possui itens alterados,", "Salvar resposta", 3000,
                            Notification.NOTIFICATION_POSITION_TOP_CENTER, Icons.INFORMATION)
                }
                gerenciadorResposta.salveItens()
            } else {
                gerenciadorResposta.alerteUsuario()
            }
        }

        private function confirmeEnvioDeResposta(event:MouseEvent):void {
            var msgm:String = "Deseja realmente enviar sua resposta? Após enviar você não poderá mais editá-la.";
            Alert.yesLabel = "Sim";
            Alert.noLabel = "Não";
            Alert.show(msgm, "Atenção", 3, Application.application as Application, envieResposta);
        }

        private function recuseResposta(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                if (gerenciadorResposta.telaResposta == null) {
                    session.messageHandler.showTextMessage("Erro", "Sua Cotação não foi carregada.", Icons.ERROR);
                    return;
                }
                if (gerenciadorResposta.editavel) {
                    gerenciadorResposta.recuse()
                } else {
                    gerenciadorResposta.alerteUsuario()
                }
            }
        }

        private function downloadCotacaoParaRespostaOffLine(event:MouseEvent):void {
            var downloadEvent:DownloadFileEvent =
                    new DownloadFileEvent(DownloadFileEvent.PLANILHA_COTACAO_RESPOSTA_OFF_LINE);
            downloadEvent.params = this.gerenciadorResposta.telaResposta.resposta.id;
            downloadEvent.dispatch();
        }

        private function uploadPlanilhaResposta(event:MouseEvent):void {
            fileRef = new FileReference();
            var documentTypes:FileFilter = new FileFilter("Documents (*.xls)", ("*.xls"));
            this.fileTypes.push(documentTypes);
            var success:Boolean = fileRef.browse(fileTypes);
            fileRef.addEventListener(Event.SELECT, trateArquivoSelecionado);
            fileRef.addEventListener(Event.COMPLETE, trateArquivoCompleto)
        }

        private function trateArquivoSelecionado(evt:Event):void {
            //Esta forma usada para upload de arquivo usando BlazeDS
            //só funciona para a versão do FP 10.0 em diante
            fileRef.load();
        }

        private function trateArquivoCompleto(event:Event):void {
            fileRef = event.currentTarget as FileReference;
            var data:ByteArray = new ByteArray();
            fileRef.data.readBytes(data, 0, fileRef.data.length);
            var msgm:String = "Deseja finalizar a resposta após enviar esta planilha?";
            Alert.yesLabel = "Sim";
            Alert.noLabel = "Não";
            Alert.show(msgm, "Atenção", 3, this, enviarPlanilha);
        }

        private function enviarPlanilha(event:CloseEvent):void {
            var importEvent:ImporteEvent = new ImporteEvent(ImporteEvent.PLANILHA_RESPOSTA, fileRef.data);
            importEvent.params.finalizar = event.detail == Alert.YES;
            importEvent.params.respostaId = gerenciadorResposta.telaResposta.resposta.id;
            importEvent.dispatch();
        }

        private function setFocusOnFilter():void {
            focusManager.setFocus(filtro.textInput);
        }

        private function hideHandler(event:FlexEvent):void {
            gerenciadorResposta.interrompaSalvamentoAutomatico();
        }

        private function creationCompleteHandler(event:FlexEvent):void {
            gerenciadorResposta.inicieSalvamentoAutomatico();
        }

        private function envieResposta(event:CloseEvent):void {
            if (event.detail == Alert.YES) {
                if (gerenciadorResposta.telaResposta == null) {
                    session.messageHandler.showTextMessage("Erro", "Sua Cotação não foi carregada.", Icons.ERROR);
                    return;
                }
                if (gerenciadorResposta.editavel) {
                    gerenciadorResposta.send()
                } else {
                    gerenciadorResposta.alerteUsuario()
                }
            }
        }

        private function confirmeRecusarResposta():void {
            var msgm:String = "Deseja realmente recusar a resposta? Assim você não mais poderá participar desta cotação";
            Alert.yesLabel = "Sim";
            Alert.noLabel = "Não";
            Alert.show(msgm, "Atenção", 3, Application.application as Application, recuseResposta);
        }

        private function visualizeDadosCliente(event:MouseEvent):void {
            if (gerenciadorResposta.telaResposta == null) {
                Session.getInstance().messageHandler.showTextMessage("Erro", "Sua Cotação não foi carregada.", Icons.ERROR);
                return;
            }
            var window:DadosCliente = new DadosCliente();
            window.comprador = gerenciadorResposta.telaResposta.comprador;
            window.showCloseButton = true;
            PopUpManager.addPopUp(window, Application.application as DisplayObject, true);
            PopUpManager.centerPopUp(window)
        }

        private function mostreDadosCotacao(event:MouseEvent):void {
            if (gerenciadorResposta.telaResposta == null) {
                Session.getInstance().messageHandler.showTextMessage("Erro", "Sua Cotação não foi carregada.", Icons.ERROR);
                return;
            }
            var dadosCotacao:DadosCotacao = new DadosCotacao();
            dadosCotacao.cotacao = gerenciadorResposta.telaResposta.cotacao;
            PopUpManager.addPopUp(dadosCotacao, Application.application as DisplayObject, true);
            PopUpManager.centerPopUp(dadosCotacao)
        }

        private function abraCaixaDeEntrada(event:MouseEvent):void {
            var viewStack:ViewStack = this.parent as ViewStack;
            new LoadEvent(LoadEvent.RESPOSTAS).dispatch();
            viewStack.selectedIndex = 0;
        }

        private function abraTermoDeAcordo(event:MouseEvent):void {
            var janelaTermoAcordo:TermoAcordo = new TermoAcordo();
            janelaTermoAcordo.showCloseButton = true;
            janelaTermoAcordo.telaResposta = gerenciadorResposta.telaResposta;
            PopUpManager.addPopUp(janelaTermoAcordo, Application.application as DisplayObject, true);
            PopUpManager.centerPopUp(janelaTermoAcordo);
        }

        private function abraPedido(event:MouseEvent):void {
            (this.parent as ViewStack).selectedIndex = 2;
            if (gerenciadorResposta.telaResposta.resposta.pedidosDTOs != null &&
                    gerenciadorResposta.telaResposta.resposta.pedidosDTOs.length > 0) {
                var pedido:Pedido = gerenciadorResposta.telaResposta.resposta.pedidosDTOs.getItemAt(0) as Pedido;
                new LoadEvent(LoadEvent.PEDIDO, pedido.id).dispatch();
            } else {
                Alert.show("Não existe pedido para esta cotação")
            }
        }

        private function downloadPedido(event:MouseEvent):void {
            if (gerenciadorResposta.telaResposta.resposta.pedidosDTOs != null &&
                    gerenciadorResposta.telaResposta.resposta.pedidosDTOs.length > 0) {
                var pedido:Pedido = gerenciadorResposta.telaResposta.resposta.pedidosDTOs.getItemAt(0) as Pedido;
                var downloadFileEvent:DownloadFileEvent = new DownloadFileEvent(DownloadFileEvent.PEDIDO);
                downloadFileEvent.params = pedido.id;
                downloadFileEvent.dispatch();
            } else {
                Alert.show("Não existe pedido para esta cotação")
            }
        }
        ]]>
	</mx:Script>

    <mx:states>
        <mx:State name="nova">
            <mx:SetProperty target="{dataGrid}" name="currentState" value="representanteNaoEditavel"/>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Button label="Responder"
                           height="100%"
                           toolTip="Aceitar cotação e começar a responder agora"
                           click="abraTermoDeAcordo(event)"
                           icon="{Icons.OK_24}"
                           styleName="barButton"
                           labelPlacement="bottom"/>
            </mx:AddChild>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Button label="Recusar"
                           height="100%"
                           toolTip="Recusar a solicitação de cotação"
                           click="confirmeRecusarResposta()"
                           icon="{Icons.CANCEL_24}"
                           styleName="barButton"
                           labelPlacement="bottom"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="canceladaOuRecusadaOuPerdidaOuAguardAnaliseOuEmAnalise">
            <mx:SetProperty target="{dataGrid}" name="currentState" value="representanteNaoEditavel"/>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Spacer width="100%"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="respondendo">
            <mx:SetProperty target="{dataGrid}" name="currentState" value="representanteEditavel"/>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Button id="buttonSalvar"
                           label="{gerenciadorResposta.telaResposta.alterada ? 'Salvar':'Salvo'}"
                           height="100%"
                           toolTip="{gerenciadorResposta.telaResposta.alterada ? 'Salvar resposta agora':'Resposta salva'}"
                           click="salveResposta(event)"
                           enabled="{gerenciadorResposta.telaResposta.alterada}"
                           icon="{Icons.SAVE_24}"
                           styleName="barButton"
                           labelPlacement="bottom"/>
            </mx:AddChild>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Button label="Enviar"
                           height="100%"
                           toolTip="Finalizar resposta agora e enviá-la ao cliente"
                           icon="{Icons.SEND_24}"
                           styleName="barButton"
                           labelPlacement="bottom"
                           click="confirmeEnvioDeResposta(event)"/>
            </mx:AddChild>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Button label="Recusar"
                           height="100%"
                           toolTip="Recusar a solicitação de cotação"
                           click="confirmeRecusarResposta()"
                           icon="{Icons.CANCEL_24}"
                           styleName="barButton"
                           labelPlacement="bottom"/>
            </mx:AddChild>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Button label="Exportar"
                           height="100%"
                           toolTip="Fazer download da cotação em excel para preenchimento offline"
                           icon="{Icons.EXPORT_24}"
                           click="downloadCotacaoParaRespostaOffLine(event)"
                           styleName="barButton"
                           labelPlacement="bottom"/>
            </mx:AddChild>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Button label="Importar"
                           height="100%"
                           toolTip="Fazer upload da cotação em excel para preenchimento automático"
                           icon="{Icons.IMPORT_24}"
                           click="uploadPlanilhaResposta(event)"
                           styleName="barButton"
                           labelPlacement="bottom"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="pedidoEnviadoOuPedidoFaturado">
            <mx:SetProperty target="{dataGrid}" name="currentState" value="representanteNaoEditavel"/>
            <mx:AddChild
                    relativeTo="{buttonsHBox}"
                    position="firstChild"
                    creationPolicy="all">
                <mx:Button label="Ver Pedido"
                           height="100%"
                           toolTip="Abre pedido dentro do próprio navegador"
                           click="abraPedido(event)"
                           icon="{Icons.SEND_24}"
                           styleName="barButton"
                           labelPlacement="bottom"/>
            </mx:AddChild>

        </mx:State>
    </mx:states>


    <mx:HBox width="100%" horizontalGap="3">
        <mx:Image source="assets/botones/atras1.png" buttonMode="true"
                  click=""/>
        <mx:LinkButton paddingLeft="1" label="Caixa de Entrada" fontSize="12"
                       click="abraCaixaDeEntrada(event)"/>
        <mx:LinkButton label="Cotação: {gerenciadorResposta.telaResposta.cotacao.titulo.length > 32 ?
                       gerenciadorResposta.telaResposta.cotacao.titulo.substring(0,30)+'...':
                       gerenciadorResposta.telaResposta.cotacao.titulo}" paddingLeft="1" fontSize="12"
                       click="mostreDadosCotacao(event)"
                       toolTip="Clique para ver detalhes da cotação"/>
        <mx:LinkButton label="{gerenciadorResposta.telaResposta.resposta.statusStringVisaoRepresentante()}"
                       click="mostreDadosCotacao(event)"
                       toolTip="Clique para ver detalhes da cotação"/>
        <components:PromptTextInput
                id="filtro" prompt="Filtro..."
                width="100%" change="setFilter()"
                keyDown="filtreItensResposta(event)"
                click="setFocusOnFilter()"/>
        <mx:Button styleName="filterButton" click="setFilter()"
                   width="25" cornerRadius="0">
            <mx:icon>@Embed(source='/assets/img/filter16.png')</mx:icon>
        </mx:Button>

    </mx:HBox>

    <resposta:RespostaGrid id="dataGrid"
                           color="0x323232"
                           verticalGridLines="false"
                           horizontalGridLines="true"
                           horizontalGridLineColor="#d6d5d5"
                           textAlign="center"
                           alternatingItemColors="[0xe7e7e7,0xe7e7e7]"
                           width="100%" height="100%"
                           dataProvider="{gerenciadorResposta.telaResposta.itensResposta}"
                           itemEditBeginning="dataGrid_itemEditEndHandler(event)"/>

    <application:FooterControlBar>
        <mx:HBox width="100%" height="100%" id="buttonsHBox">
            <mx:Form width="100%" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" >
                <mx:FormItem label="Estado" fontWeight="bold">
                    <mx:Label text="{_telaResposta.resposta.statusStringVisaoRepresentante()}" fontWeight="bold" fontSize="15"/>
                </mx:FormItem>
                <mx:FormItem label="Salva em:" >
                    <mx:Label text="{_telaResposta.resposta.dataSalvaFormatada}" />
                </mx:FormItem>
            </mx:Form>
            <mx:Form width="100%" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" >
                <mx:FormItem label="Comprador">
                    <mx:LinkButton label="{gerenciadorResposta.telaResposta.comprador.nome}" fontWeight="normal"
                                   click="visualizeDadosCliente(event)"/>
                </mx:FormItem>
                <mx:FormItem label="Email do comprador">
                    <mx:LinkButton label="{gerenciadorResposta.telaResposta.comprador.email}" fontWeight="normal"
                                   click="visualizeDadosCliente(event)"/>
                </mx:FormItem>
            </mx:Form>
            <mx:Form width="100%" paddingLeft="0" paddingRight="0" paddingBottom="0" paddingTop="0" >
                <mx:FormItem label="Cliente">
                    <mx:LinkButton label="{gerenciadorResposta.telaResposta.comprador.empresa.nomeFantasia}"
                                   click="visualizeDadosCliente(event)"/>
                </mx:FormItem>
                <mx:FormItem label="Fone">
                    <mx:LinkButton label="{gerenciadorResposta.telaResposta.comprador.telefones.getItemAt(0)}"
                                   click="visualizeDadosCliente(event)"/>
                </mx:FormItem>
            </mx:Form>
        </mx:HBox>
    </application:FooterControlBar>
</mx:Panel>
