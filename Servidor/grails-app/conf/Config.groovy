import br.com.cotecom.domain.error.ErrorHandlerFactory
import grails.plugins.springsecurity.SecurityConfigType
import grails.util.Environment
import org.apache.log4j.ConsoleAppender

// locations to search for config files that get merged into the main config
// config files can either be Java properties files or ConfigSlurper scripts

// grails.config.locations = [ "classpath:${appName}-config.properties",
//                             "classpath:${appName}-config.groovy",
//                             "file:${userHome}/.grails/${appName}-config.properties",
//                             "file:${userHome}/.grails/${appName}-config.groovy"]

// if(System.properties["${appName}.config.location"]) {
//    grails.config.locations << "file:" + System.properties["${appName}.config.location"]
// }
grails.app.context = "/"
grails.mime.file.extensions = true // enables the parsing of file extensions from URLs into the request format
grails.mime.use.accept.header = false
grails.mime.types = [html: ['text/html', 'application/xhtml+xml'],
        xml: ['text/xml', 'application/xml'],
        text: 'text/plain',
        js: 'text/javascript',
        rss: 'application/rss+xml',
        atom: 'application/atom+xml',
        css: 'text/css',
        csv: 'text/csv',
        all: '*/*',
        json: ['application/json', 'text/json'],
        form: 'application/x-www-form-urlencoded',
        multipartForm: 'multipart/form-data'
]
// The default codec used to encode data with ${}
grails.views.default.codec = "none" // none, html, base64
grails.views.gsp.encoding = "UTF-8"
grails.converters.encoding = "UTF-8"

// enabled native2ascii conversion of i18n properties files
grails.enable.native2ascii = true

// Password usado para criptografar
encryption.password = "pass2pass"

errorHandler.defaultErrorHandler = ErrorHandlerFactory.DEFAULT_ERROR_HANDLER
grails.hibernate.cache.queries = true

// set per-environment serverURL stem for creating absolute links
environments {
    production {
        grails.serverURL = "http://app.kote.com.br"
    }
    development {
        grails.serverURL = "http://localhost:8080"
    }
}

grails{
    mail {
        host = "smtp.gmail.com"
        port = 465
        username = "nao-responda@kote.com.br"
        password = "%&bY7CHZ%"
        props = ["mail.smtp.auth": "true",
                "mail.smtp.socketFactory.port": "465",
                "mail.smtp.socketFactory.class": "javax.net.ssl.SSLSocketFactory",
                "mail.smtp.socketFactory.fallback": "false"]
    }
}

//Log Properties
log_cons_pattern = '%d{yyyy-MM-dd HH:mm:ss} [%t] %p - %6c - %m%n'
log_file_fileName = 'logs/kote.log'
log_file_pattern = '%d{yyyy-MM-dd HH:mm:ss} [%t] %p - %6c - %m%n'
log_jdbc_user = 'postgres'
log_jdbc_password = 'pass2pass'
log_jdbc_driver = 'org.postgresql.Driver'
log_jdbc_url = 'jdbc:postgresql://localhost:5432/cotecom_dev'
log_jdbc_tableName = "app_log"
log_jdbc_schema = "metadata"
log_jdbc_pattern = "INSERT INTO \"${log_jdbc_schema}\".\"${log_jdbc_tableName}\" (log_date, log_level, category, location, message) VALUES ( '%d{yyyy-MM-dd HH:mm:ss.SSS}', '%p', '%c', '%C;%L', '%m %n' )"


log4j = {
    // Example of changing the log pattern for the default console
    // appender:
    //
    appenders {

        appender new ConsoleAppender(
                name: 'devlog',
                layout: pattern(conversionPattern: log_cons_pattern)
        )
        appender new org.apache.log4j.DailyRollingFileAppender(
                name: "mylog",
                fileName: log_file_fileName,
                layout: pattern(conversionPattern: log_file_pattern)
        )

        // configure the performance appenders
        if (Environment.current == Environment.DEVELOPMENT || Environment.current == Environment.PRODUCTION) {
            // file appender that writes out the URLs of the Google Chart API graphs generated by the performanceGraphAppender
            def performanceGraphFileAppender = new org.apache.log4j.FileAppender(
                    fileName: "logs/performancegraphs.log",
                    layout: pattern(conversionPattern: '%m%n')
            )
            appender name: 'performanceGraphFileAppender', performanceGraphFileAppender

            // this appender creates the Google Chart API graphs
            def performanceGraphAppender = new org.perf4j.log4j.GraphingStatisticsAppender(
                    graphType: 'Mean',      // possible options: Mean, Min, Max, StdDev, Count or TPS
                    tagNamesToGraph: 'Criacao Itens análise,Ordenando Itens análise,Criando DTO itens análise',
                    dataPointsPerGraph: 15
            )
            performanceGraphAppender.addAppender(performanceGraphFileAppender)
            appender name: 'performanceGraph', performanceGraphAppender


            // file appender that writes out the textual, aggregated performance stats generated by the performanceStatsAppender
            def performanceStatsFileAppender = new org.apache.log4j.FileAppender(
                    fileName: "logs/performance.log",
                    layout: pattern(conversionPattern: '%m%n')  // alternatively use the StatisticsCsvLayout to generate CSV
            )
            appender name: 'performanceStatsFileAppender', performanceStatsFileAppender


            // this is the most important appender and first in the appender chain. it aggregates all profiling data withing a certain time frame.
            // the GraphingStatisticsAppender is attached as a child to this appender and uses its aggregated data.
            def performanceStatsAppender = new org.perf4j.log4j.AsyncCoalescingStatisticsAppender(
                    timeSlice: 120000    // ms
            )
            performanceStatsAppender.addAppender(performanceStatsFileAppender)
            performanceStatsAppender.addAppender(performanceGraphAppender)
            appender name: 'performanceStatsAppender', performanceStatsAppender
        }
    }

    // configure the performanceStatsAppender to log at INFO level
    if (Environment.current == Environment.DEVELOPMENT || Environment.current == Environment.PRODUCTION) {
        info   performanceStatsAppender: 'org.perf4j.TimingLogger'
    }

    if (Environment.current == Environment.PRODUCTION) {
        root { info "mylog" }
    } else {
        root { debug "mylog" }
        root { info "devlog" }
    }
    error 'org.codehaus.groovy.grails.web.servlet',  //  controllers
            'org.codehaus.groovy.grails.web.pages', //  GSP
            'org.codehaus.groovy.grails.web.sitemesh', //  layouts
            'org.codehaus.groovy.grails."web.mapping.filter', // URL mapping
            'org.codehaus.groovy.grails."web.mapping', // URL mapping
            'org.codehaus.groovy.grails.commons', // core / classloading
            'org.codehaus.groovy.grails.plugins', // plugins
            'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration
            'org.springframework', //spring framework
            'org.hibernate', //hibernate api

            //Novos filtros de mensagens "inuteis" para o log da aplicacao
            'com.opensymphony.oscache',
            'org.codehaus.groovy',
            'grails.buildtestdata'

    warn 'org.mortbay.log',
            'com',
            'org',
            'net'

    info 'grails.app'
}

// enables the webtier compiler for all environments
//flex.webtier.compiler.enabled = true
// disables the webtier compiler for all environments
//flex.webtier.compiler.enabled = false

// explicit enabling/disabling of the webtier compiler per environment
environments {
    development {
        flex.webtier.compiler.enabled = true
    }
    test {
        flex.webtier.compiler.enabled = true
    }
    production {
        flex.webtier.compiler.enabled = false
    }
}

//log4j.logger.org.springframework.security='off,stdout'
grails {
    plugins {
        springsecurity {
            userLookup {
                userDomainClassName = 'br.com.cotecom.domain.usuarios.Usuario'
                usernamePropertyName = 'email'
                authorityJoinClassName = 'br.com.cotecom.domain.usuarios.UsuarioResponsabilidade'
                passwordPropertyName = 'password'
                enabledPropertyName = 'habilitado'
                authoritiesPropertyName = 'responsabilidades'
            }
            useSwitchUserFilter = true
            switchUser {
                exitUserUrl = '/j_spring_security_exit_user'
                switchUserUr = '/j_spring_security_switch_user'
            }
            // Pessimist locking URLs
            rejectIfNoRule = false

            // Changing standar security config type
            securityConfigType = SecurityConfigType.Requestmap
            requestMap {
                className = 'br.com.cotecom.domain.usuarios.Requestmap'
                urlField = 'url'
                configAttributeField = 'configAttribute'
            }

            rememberMe.cookieName = 'kote_remember_me'
            rememberMe.key = 'koteRocks'
            authority.className = 'br.com.cotecom.domain.usuarios.Responsabilidade'
            authority.nameField = 'responsabilidade'
        }

    }
    plugin {
        aws {
            credentials {
                accessKey = "AKIAJ5LLJX7E3TJWJ7QQ"
                secretKey = "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"
            }
            ses {
                from = "nao-responda@kote.com.br"
                enabled = true
            }
        }
    }
}

/*
 accessKey = "AKIAJ5LLJX7E3TJWJ7QQ"
                secretKey = "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"
            }
            ses {
                from = "nao-responda@kote.com.br"
                enabled = true
 */
environments {
    development {
        grails.plugin.aws.ses.catchall = "danilomr12@gmail.com"
        enabled = false
    }
    test {
        grails.plugin.aws.ses.enabled = false
    }
}
backgroundThread {
    queueSize = 1000 // Maximum number of tasks to queue up
    threadCount = 5 // Number of threads processing background tasks.
    tasksPerDrain = 100
}